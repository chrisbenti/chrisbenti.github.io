{"version":3,"sources":["data/dice.ts","PermutationResults.tsx","services/permuteDice.ts","App.tsx","index.tsx"],"names":["DiceColor","ALL_COLORS","RED","BLUE","GREEN","YELLOW","BLACK","WHITE","NONE","getDiceRoll","roll","damage","surge","accuracy","damageResist","surgeResist","evade","RED_DICE","color","rolls","BLUE_DICE","GREEN_DICE","YELLOW_DICE","BLACK_DICE","WHITE_DICE","NONE_DICE","DICE_BY_COLOR","PermutationResults","colors","filteredColors","filter","length","dice","colorsAsDice","map","hasAttack","x","hasDefence","permutedDice","d","reduce","a","b","rolls1","rolls2","forEach","d1R","d2R","roll1","roll2","push","combineRollsGroups","max","Math","possibleValues","Array","from","i","bordered","condensed","striped","key","permuteDice","feature","heatMapColorForValue","value","PercentageTR","extractedRolls","values","title","style","textAlign","min","backgroundColor","round","RealizedSurge","attackRolls","RealizedAttack","PermuteRowForRollType","featureExtracted","renderSelectOption","item","itemProps","text","onClick","handleClick","index","App","useState","color1","setColor1","color2","setColor2","color3","setColor3","color4","setColor4","color5","setColor5","color6","setColor6","color7","setColor7","color8","setColor8","maxWidth","width","fixedToTop","className","Group","align","Heading","useCallback","padding","marginTop","margin","marginBottom","display","justifyContent","flexWrap","itemRenderer","onItemSelect","items","rightIcon","ReactDOM","render","document","getElementById"],"mappings":"2KAAYA,E,wTAAAA,K,UAAAA,E,YAAAA,E,cAAAA,E,gBAAAA,E,cAAAA,E,cAAAA,E,aAAAA,M,KAUL,IAAMC,EAAa,CACxBD,EAAUE,IACVF,EAAUG,KACVH,EAAUI,MACVJ,EAAUK,OACVL,EAAUM,MACVN,EAAUO,MACVP,EAAUQ,MAiBZ,SAASC,EAAYC,GACnB,O,yVAAO,CAAP,CACEC,OAAQ,EACRC,MAAO,EACPC,SAAU,EACVC,aAAc,EACdC,YAAa,EACbC,MAAO,GACJN,GAIA,IAAMO,EAAiB,CAC5BC,MAAOlB,EAAUE,IACjBiB,MAAO,CACLV,EAAY,CAAEE,OAAQ,IACtBF,EAAY,CAAEE,OAAQ,IACtBF,EAAY,CAAEE,OAAQ,IACtBF,EAAY,CAAEE,OAAQ,EAAGC,MAAO,IAChCH,EAAY,CAAEE,OAAQ,IACtBF,EAAY,CAAEE,OAAQ,MAIbS,EAAkB,CAC7BF,MAAOlB,EAAUG,KACjBgB,MAAO,CACLV,EAAY,CAAEI,SAAU,EAAGD,MAAO,IAClCH,EAAY,CAAEI,SAAU,EAAGF,OAAQ,IACnCF,EAAY,CAAEI,SAAU,EAAGF,OAAQ,IACnCF,EAAY,CAAEI,SAAU,EAAGF,OAAQ,EAAGC,MAAO,IAC7CH,EAAY,CAAEI,SAAU,EAAGF,OAAQ,IACnCF,EAAY,CAAEI,SAAU,EAAGF,OAAQ,MAI1BU,EAAmB,CAC9BH,MAAOlB,EAAUI,MACjBe,MAAO,CACLV,EAAY,CAAEI,SAAU,EAAGD,MAAO,IAClCH,EAAY,CAAEI,SAAU,EAAGF,OAAQ,EAAGC,MAAO,IAC7CH,EAAY,CAAEI,SAAU,EAAGF,OAAQ,IACnCF,EAAY,CAAEI,SAAU,EAAGF,OAAQ,EAAGC,MAAO,IAC7CH,EAAY,CAAEI,SAAU,EAAGF,OAAQ,IACnCF,EAAY,CAAEI,SAAU,EAAGF,OAAQ,MAI1BW,EAAoB,CAC/BJ,MAAOlB,EAAUI,MACjBe,MAAO,CACLV,EAAY,CAAEG,MAAO,IACrBH,EAAY,CAAEG,MAAO,EAAGD,OAAQ,IAChCF,EAAY,CAAEE,OAAQ,EAAGE,SAAU,IACnCJ,EAAY,CAAEG,MAAO,EAAGD,OAAQ,EAAGE,SAAU,IAC7CJ,EAAY,CAAEG,MAAO,EAAGC,SAAU,IAClCJ,EAAY,CAAEE,OAAQ,EAAGE,SAAU,MAI1BU,EAAmB,CAC9BL,MAAOlB,EAAUM,MACjBa,MAAO,CACLV,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEM,YAAa,MAIlBS,EAAmB,CAC9BN,MAAOlB,EAAUO,MACjBY,MAAO,CACLV,EAAY,IACZA,EAAY,CAAEK,aAAc,IAC5BL,EAAY,CAAEM,YAAa,IAC3BN,EAAY,CAAEK,aAAc,EAAGC,YAAa,IAC5CN,EAAY,CAAEK,aAAc,EAAGC,YAAa,IAC5CN,EAAY,CAAEO,MAAO,MAIZS,EAAkB,CAC7BP,MAAOlB,EAAUQ,KACjBW,MAAO,IAGIO,GAAyC,mBACnD1B,EAAUE,IAAMe,GADmC,cAEnDjB,EAAUG,KAAOiB,GAFkC,cAGnDpB,EAAUI,MAAQiB,GAHiC,cAInDrB,EAAUK,OAASiB,GAJgC,cAKnDtB,EAAUM,MAAQiB,GALiC,cAMnDvB,EAAUO,MAAQiB,GANiC,cAOnDxB,EAAUQ,KAAOiB,GAPkC,G,wBCnH/C,IAAME,EAAqB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAC7BC,EAA8BD,EAAOE,QACzC,SAAAZ,GAAK,OAAIA,IAAUlB,EAAUQ,QAE/B,GAA8B,IAA1BqB,EAAeE,OACjB,OAAO,0DAET,ICa0BC,EDbpBC,EAAuBJ,EAAeK,KAC1C,SAAAhB,GAAK,OAAIQ,EAAcR,MAGnBiB,EACJP,EAAOE,QACL,SAAAM,GAAC,OACCA,IAAMpC,EAAUE,KAChBkC,IAAMpC,EAAUI,OAChBgC,IAAMpC,EAAUG,MAChBiC,IAAMpC,EAAUK,UAClB0B,OAAS,EAEPM,EACJT,EAAOE,QAAO,SAAAM,GAAC,OAAIA,IAAMpC,EAAUM,OAAS8B,IAAMpC,EAAUO,SAAOwB,OACnE,EAEIO,ECEC,CAAEV,QANiBI,EDIOC,GCHbC,KAAI,SAAAK,GAAC,OAAIA,EAAErB,SAKdC,MAJHa,EACXE,KAAI,SAAAK,GAAC,OAAIA,EAAEpB,SACXqB,QAAO,SAACC,EAAGC,GAAJ,OAdZ,SAA4BC,EAAgBC,GAC1C,IAAMzB,EAAgB,GAMtB,OALAwB,EAAOE,SAAQ,SAAAC,GACbF,EAAOC,SAAQ,SAAAE,GAdnB,IAAsBC,EAAaC,EAe7B9B,EAAM+B,MAfuBD,EAeAF,EAd1B,CACLpC,QAFkBqC,EAeQF,GAbZnC,OAASsC,EAAMtC,OAC7BC,MAAOoC,EAAMpC,MAAQqC,EAAMrC,MAC3BC,SAAUmC,EAAMnC,SAAWoC,EAAMpC,SACjCC,aAAckC,EAAMlC,aAAemC,EAAMnC,aACzCC,YAAaiC,EAAMjC,YAAckC,EAAMlC,YACvCC,MAAOgC,EAAMhC,MAAQiC,EAAMjC,eAWtBG,EAOagC,CAAmBV,EAAGC,ODCtCU,EAAM,EACVd,EAAanB,MAAM0B,SAAQ,SAAA1B,GACzBiC,EAAMC,KAAKD,IACTA,EACAjC,EAAMN,SACNM,EAAMR,OACNQ,EAAML,aACNK,EAAMH,MACNG,EAAMP,MACNO,EAAMJ,gBAGV,IAAMuC,EAAiBC,MAAMC,KAAK,IAAID,MAAMH,IAAM,SAAChB,EAAGqB,GAAJ,OAAUA,EAAI,KAEhE,OACE,oCACE,kBAAC,IAAD,CAAWC,UAAQ,EAACC,WAAS,EAACC,SAAO,GACnC,+BACE,4BACE,6BACCN,EAAepB,KAAI,SAAAE,GAAC,OACnB,wBAAIyB,IAAKzB,GAAIA,EAAb,UAIN,+BACE,kBAAC,EAAD,CACE0B,YAAaxB,EACbyB,QAAQ,SACRT,eAAgBA,IAElB,kBAAC,EAAD,CACEQ,YAAaxB,EACbyB,QAAQ,QACRT,eAAgBA,IAElB,kBAAC,EAAD,CACEQ,YAAaxB,EACbyB,QAAQ,WACRT,eAAgBA,IAElB,kBAAC,EAAD,CACEQ,YAAaxB,EACbyB,QAAQ,eACRT,eAAgBA,IAElB,kBAAC,EAAD,CACEQ,YAAaxB,EACbyB,QAAQ,cACRT,eAAgBA,IAElB,kBAAC,EAAD,CACEQ,YAAaxB,EACbyB,QAAQ,QACRT,eAAgBA,IAEjBnB,GAAaE,GACZ,oCACE,kBAAC,EAAD,CACEC,aAAcA,EACdgB,eAAgBA,IAElB,kBAAC,EAAD,CACEhB,aAAcA,EACdgB,eAAgBA,SA6BhC,SAASU,EAAqBC,GAE5B,MAAO,OADiB,KAAf,EAAMA,GACK,eAGtB,IAAMC,EAAe,SAAC,GAQf,IAPLC,EAOI,EAPJA,eACAC,EAMI,EANJA,OACAC,EAKI,EALJA,MAMA,OACE,4BACE,wBAAIC,MAAO,CAAEC,UAAW,UAAYF,GACnCD,EACElC,KACC,SAAAsC,GAAG,OACDL,EAAerC,QAAO,SAAAM,GAAC,OAAIA,GAAKoC,KAAKzC,OAASoC,EAAepC,UAEhEG,KAAI,SAAC+B,EAAOR,GAAR,OACH,wBACEI,IAAKJ,EACLa,MAAO,CACLG,gBAAiBT,EAAqBC,GACtCM,UAAW,UAGZlB,KAAKqB,MAAc,IAART,GAPd,UAcJU,EAAgB,SAAC,GAMhB,IALLrC,EAKI,EALJA,aACAgB,EAII,EAJJA,eAKMsB,EAActC,EAAanB,MAAMe,KAAI,SAAAxB,GACzC,OAAIA,EAAKM,MACA,EAEFqC,KAAKD,IAAI1C,EAAKE,MAAQF,EAAKK,YAAa,MAGjD,OACE,kBAAC,EAAD,CACEoD,eAAgBS,EAChBR,OAAQd,EACRe,MAAO,gBAKPQ,EAAiB,SAAC,GAMjB,IALLvC,EAKI,EALJA,aACAgB,EAII,EAJJA,eAKMsB,EAActC,EAAanB,MAAMe,KAAI,SAAAxB,GACzC,OAAIA,EAAKM,MACA,EAEFqC,KAAKD,IAAI1C,EAAKC,OAASD,EAAKI,aAAc,MAGnD,OACE,kBAAC,EAAD,CACEqD,eAAgBS,EAChBR,OAAQd,EACRe,MAAO,iBAKPS,EAAwB,SAAC,GAQxB,IAPLhB,EAOI,EAPJA,YACAC,EAMI,EANJA,QACAT,EAKI,EALJA,eAMMyB,EAAmBjB,EAAY3C,MAAMe,KAAI,SAAAE,GAAC,OAAIA,EAAE2B,MAEtD,OAAmB,IADAV,KAAKD,IAAL,MAAAC,KAAI,YAAQ0B,IAEtB,KAIP,kBAAC,EAAD,CACEZ,eAAgBY,EAChBX,OAAQd,EACRe,MAAON,KE1Nb,SAASiB,EAAmBC,EAAiBC,GAC3C,OACE,kBAAC,IAAD,CACEC,KAAMF,EACNG,QAASF,EAAUG,YACnBxB,IAAKqB,EAAUI,QAKrB,IA8HeC,EA9HO,WAAO,IAAD,EACEC,mBAASxF,EAAUQ,MADrB,mBACnBiF,EADmB,KACXC,EADW,OAEEF,mBAASxF,EAAUQ,MAFrB,mBAEnBmF,EAFmB,KAEXC,EAFW,OAGEJ,mBAASxF,EAAUQ,MAHrB,mBAGnBqF,EAHmB,KAGXC,EAHW,OAIEN,mBAASxF,EAAUQ,MAJrB,mBAInBuF,EAJmB,KAIXC,EAJW,OAKER,mBAASxF,EAAUQ,MALrB,mBAKnByF,EALmB,KAKXC,EALW,OAMEV,mBAASxF,EAAUQ,MANrB,mBAMnB2F,EANmB,KAMXC,EANW,OAOEZ,mBAASxF,EAAUQ,MAPrB,mBAOnB6F,EAPmB,KAOXC,EAPW,OAQEd,mBAASxF,EAAUQ,MARrB,mBAQnB+F,EARmB,KAQXC,EARW,KAU1B,OACE,yBAAKlC,MAAO,CAAEmC,SAAU,QAASC,MAAO,UACtC,kBAAC,IAAD,CAAQC,YAAU,EAACC,UAAU,YAC3B,kBAAC,IAAOC,MAAR,CAAcC,MAAO,QACnB,kBAAC,IAAOC,QAAR,yBAEF,kBAAC,IAAOF,MAAR,CAAcC,MAAO,SACnB,kBAAC,IAAD,CACE3B,KAAK,QACLC,QAAS4B,uBAAY,WACnBtB,EAAU1F,EAAUQ,MACpBoF,EAAU5F,EAAUQ,MACpBsF,EAAU9F,EAAUQ,MACpBwF,EAAUhG,EAAUQ,MACpB0F,EAAUlG,EAAUQ,MACpB4F,EAAUpG,EAAUQ,MACpB8F,EAAUtG,EAAUQ,MACpBgG,EAAUxG,EAAUQ,QACnB,CACDkF,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,QAKR,yBAAKlC,MAAO,CAAE2C,QAAS,MAAOP,MAAO,QAASQ,UAAW,SACvD,wBAAI5C,MAAO,CAAE6C,OAAQ,EAAGC,aAAc,SAAtC,QACA,yBACE9C,MAAO,CACL+C,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACVH,aAAc,QAGhB,kBAAC,IAAD,CACEI,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAIwE,EAAUxE,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMM,KAEvC,kBAAC,IAAD,CACE+B,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAI0E,EAAU1E,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMQ,KAEvC,kBAAC,IAAD,CACE6B,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAI4E,EAAU5E,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMU,KAEvC,kBAAC,IAAD,CACE2B,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAI8E,EAAU9E,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMY,KAEvC,kBAAC,IAAD,CACEyB,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAIgF,EAAUhF,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMc,KAEvC,kBAAC,IAAD,CACEuB,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAIkF,EAAUlF,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMgB,KAEvC,kBAAC,IAAD,CACEqB,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAIoF,EAAUpF,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMkB,KAEvC,kBAAC,IAAD,CACEmB,aAAcxC,EACdyC,aAAc,SAAAvG,GAAK,OAAIsF,EAAUtF,IACjCwG,MAAOzH,GAEP,kBAAC,IAAD,CAAQ0H,UAAU,aAAaxC,KAAMoB,MAGzC,wBAAIjC,MAAO,CAAE6C,OAAQ,EAAGC,aAAc,SAAtC,WACA,kBAAC,EAAD,CACExF,OAAQ,CACN6D,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,QCtIZqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.68317538.chunk.js","sourcesContent":["export enum DiceColor {\n  RED = \"RED\",\n  BLUE = \"BLUE\",\n  GREEN = \"GREEN\",\n  YELLOW = \"YELLOW\",\n  BLACK = \"BLACK\",\n  WHITE = \"WHITE\",\n  NONE = \"NONE\"\n}\n\nexport const ALL_COLORS = [\n  DiceColor.RED,\n  DiceColor.BLUE,\n  DiceColor.GREEN,\n  DiceColor.YELLOW,\n  DiceColor.BLACK,\n  DiceColor.WHITE,\n  DiceColor.NONE\n];\n\nexport interface Roll {\n  damage: number;\n  surge: number;\n  accuracy: number;\n  damageResist: number;\n  surgeResist: number;\n  evade: number;\n}\n\nexport interface Dice {\n  rolls: Roll[];\n  color: DiceColor;\n}\n\nfunction getDiceRoll(roll: Partial<Roll>): Roll {\n  return {\n    damage: 0,\n    surge: 0,\n    accuracy: 0,\n    damageResist: 0,\n    surgeResist: 0,\n    evade: 0,\n    ...roll\n  };\n}\n\nexport const RED_DICE: Dice = {\n  color: DiceColor.RED,\n  rolls: [\n    getDiceRoll({ damage: 1 }),\n    getDiceRoll({ damage: 2 }),\n    getDiceRoll({ damage: 2 }),\n    getDiceRoll({ damage: 2, surge: 1 }),\n    getDiceRoll({ damage: 3 }),\n    getDiceRoll({ damage: 3 })\n  ]\n};\n\nexport const BLUE_DICE: Dice = {\n  color: DiceColor.BLUE,\n  rolls: [\n    getDiceRoll({ accuracy: 2, surge: 1 }),\n    getDiceRoll({ accuracy: 2, damage: 1 }),\n    getDiceRoll({ accuracy: 3, damage: 2 }),\n    getDiceRoll({ accuracy: 3, damage: 1, surge: 1 }),\n    getDiceRoll({ accuracy: 4, damage: 2 }),\n    getDiceRoll({ accuracy: 5, damage: 1 })\n  ]\n};\n\nexport const GREEN_DICE: Dice = {\n  color: DiceColor.GREEN,\n  rolls: [\n    getDiceRoll({ accuracy: 1, surge: 1 }),\n    getDiceRoll({ accuracy: 1, damage: 1, surge: 1 }),\n    getDiceRoll({ accuracy: 1, damage: 2 }),\n    getDiceRoll({ accuracy: 2, damage: 1, surge: 1 }),\n    getDiceRoll({ accuracy: 2, damage: 2 }),\n    getDiceRoll({ accuracy: 3, damage: 2 })\n  ]\n};\n\nexport const YELLOW_DICE: Dice = {\n  color: DiceColor.GREEN,\n  rolls: [\n    getDiceRoll({ surge: 1 }),\n    getDiceRoll({ surge: 2, damage: 1 }),\n    getDiceRoll({ damage: 2, accuracy: 1 }),\n    getDiceRoll({ surge: 1, damage: 1, accuracy: 1 }),\n    getDiceRoll({ surge: 1, accuracy: 2 }),\n    getDiceRoll({ damage: 1, accuracy: 2 })\n  ]\n};\n\nexport const BLACK_DICE: Dice = {\n  color: DiceColor.BLACK,\n  rolls: [\n    getDiceRoll({ damageResist: 1 }),\n    getDiceRoll({ damageResist: 1 }),\n    getDiceRoll({ damageResist: 2 }),\n    getDiceRoll({ damageResist: 2 }),\n    getDiceRoll({ damageResist: 3 }),\n    getDiceRoll({ surgeResist: 1 })\n  ]\n};\n\nexport const WHITE_DICE: Dice = {\n  color: DiceColor.WHITE,\n  rolls: [\n    getDiceRoll({}),\n    getDiceRoll({ damageResist: 1 }),\n    getDiceRoll({ surgeResist: 1 }),\n    getDiceRoll({ damageResist: 1, surgeResist: 1 }),\n    getDiceRoll({ damageResist: 1, surgeResist: 1 }),\n    getDiceRoll({ evade: 1 })\n  ]\n};\n\nexport const NONE_DICE: Dice = {\n  color: DiceColor.NONE,\n  rolls: []\n};\n\nexport const DICE_BY_COLOR: { [P in DiceColor]: Dice } = {\n  [DiceColor.RED]: RED_DICE,\n  [DiceColor.BLUE]: BLUE_DICE,\n  [DiceColor.GREEN]: GREEN_DICE,\n  [DiceColor.YELLOW]: YELLOW_DICE,\n  [DiceColor.BLACK]: BLACK_DICE,\n  [DiceColor.WHITE]: WHITE_DICE,\n  [DiceColor.NONE]: NONE_DICE\n};\n","import React from \"react\";\nimport { Card, HTMLTable } from \"@blueprintjs/core\";\n\nimport { permuteDice, PermutedDice } from \"./services/permuteDice\";\nimport { DiceColor, DICE_BY_COLOR, Dice, Roll } from \"./data/dice\";\n\nimport \"./App.css\";\n\nexport const PermutationResults = ({ colors }: { colors: DiceColor[] }) => {\n  const filteredColors: DiceColor[] = colors.filter(\n    color => color !== DiceColor.NONE\n  );\n  if (filteredColors.length === 0) {\n    return <i>Select some dice first, fam</i>;\n  }\n  const colorsAsDice: Dice[] = filteredColors.map(\n    color => DICE_BY_COLOR[color]\n  );\n\n  const hasAttack =\n    colors.filter(\n      x =>\n        x === DiceColor.RED ||\n        x === DiceColor.GREEN ||\n        x === DiceColor.BLUE ||\n        x === DiceColor.YELLOW\n    ).length > 0;\n\n  const hasDefence =\n    colors.filter(x => x === DiceColor.BLACK || x === DiceColor.WHITE).length >\n    0;\n\n  const permutedDice = permuteDice(colorsAsDice);\n  let max = 0;\n  permutedDice.rolls.forEach(rolls => {\n    max = Math.max(\n      max,\n      rolls.accuracy,\n      rolls.damage,\n      rolls.damageResist,\n      rolls.evade,\n      rolls.surge,\n      rolls.surgeResist\n    );\n  });\n  const possibleValues = Array.from(new Array(max), (x, i) => i + 1);\n\n  return (\n    <>\n      <HTMLTable bordered condensed striped>\n        <thead>\n          <tr>\n            <th />\n            {possibleValues.map(x => (\n              <th key={x}>{x}+</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"damage\"\n            possibleValues={possibleValues}\n          />\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"surge\"\n            possibleValues={possibleValues}\n          />\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"accuracy\"\n            possibleValues={possibleValues}\n          />\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"damageResist\"\n            possibleValues={possibleValues}\n          />\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"surgeResist\"\n            possibleValues={possibleValues}\n          />\n          <PermuteRowForRollType\n            permuteDice={permutedDice}\n            feature=\"evade\"\n            possibleValues={possibleValues}\n          />\n          {hasAttack && hasDefence && (\n            <>\n              <RealizedAttack\n                permutedDice={permutedDice}\n                possibleValues={possibleValues}\n              />\n              <RealizedSurge\n                permutedDice={permutedDice}\n                possibleValues={possibleValues}\n              />\n            </>\n          )}\n        </tbody>\n      </HTMLTable>\n      {/* <p style={{ marginTop: \"1em\" }}>\n        <i>\n          This table shows you the likelihood of having at least x of a result.\n          For example, the <b>2+</b> column for the <b>damage</b> row shows you\n          the probability of having at least 2 damage in your roll.\n        </i>\n      </p>\n      {hasAttack && hasDefence && (\n        <p>\n          <i>\n            You've selected both attacking and defensive dice. While the we'll\n            show you each individual roll type's probability (I.E damage,\n            defence, etc), we also show you a computed value (I.E \"damage -\n            dr\"). What this functionally means is \"If you roll the selected\n            dice-set, this is the probability of having at least R damage/surge\n            in your roll, accounting for the defensive roll\"{\" \"}\n          </i>\n        </p>\n      )} */}\n    </>\n  );\n};\n\nfunction heatMapColorForValue(value: number) {\n  var h = (1.0 - value) * 240;\n  return \"hsl(\" + h + \", 100%, 50%)\";\n}\n\nconst PercentageTR = ({\n  extractedRolls,\n  values,\n  title\n}: {\n  extractedRolls: number[];\n  values: number[];\n  title: string;\n}) => {\n  return (\n    <tr>\n      <td style={{ textAlign: \"right\" }}>{title}</td>\n      {values\n        .map(\n          min =>\n            extractedRolls.filter(x => x >= min).length / extractedRolls.length\n        )\n        .map((value, i) => (\n          <td\n            key={i}\n            style={{\n              backgroundColor: heatMapColorForValue(value),\n              textAlign: \"right\"\n            }}\n          >\n            {Math.round(value * 100)}%\n          </td>\n        ))}\n    </tr>\n  );\n};\n\nconst RealizedSurge = ({\n  permutedDice,\n  possibleValues\n}: {\n  permutedDice: PermutedDice;\n  possibleValues: number[];\n}) => {\n  const attackRolls = permutedDice.rolls.map(roll => {\n    if (roll.evade) {\n      return 0;\n    }\n    return Math.max(roll.surge - roll.surgeResist, 0);\n  });\n\n  return (\n    <PercentageTR\n      extractedRolls={attackRolls}\n      values={possibleValues}\n      title={\"surge - sr\"}\n    />\n  );\n};\n\nconst RealizedAttack = ({\n  permutedDice,\n  possibleValues\n}: {\n  permutedDice: PermutedDice;\n  possibleValues: number[];\n}) => {\n  const attackRolls = permutedDice.rolls.map(roll => {\n    if (roll.evade) {\n      return 0;\n    }\n    return Math.max(roll.damage - roll.damageResist, 0);\n  });\n\n  return (\n    <PercentageTR\n      extractedRolls={attackRolls}\n      values={possibleValues}\n      title={\"damage - dr\"}\n    />\n  );\n};\n\nconst PermuteRowForRollType = ({\n  permuteDice,\n  feature,\n  possibleValues\n}: {\n  permuteDice: PermutedDice;\n  feature: keyof Roll;\n  possibleValues: number[];\n}) => {\n  const featureExtracted = permuteDice.rolls.map(x => x[feature]);\n  const featureMax = Math.max(...featureExtracted);\n  if (featureMax === 0) {\n    return null;\n  }\n\n  return (\n    <PercentageTR\n      extractedRolls={featureExtracted}\n      values={possibleValues}\n      title={feature}\n    />\n  );\n};\n","import { DiceColor, Roll, Dice } from \"../data/dice\";\n\nexport interface PermutedDice {\n  colors: DiceColor[];\n  rolls: Roll[];\n}\n\nfunction combineRolls(roll1: Roll, roll2: Roll): Roll {\n  return {\n    damage: roll1.damage + roll2.damage,\n    surge: roll1.surge + roll2.surge,\n    accuracy: roll1.accuracy + roll2.accuracy,\n    damageResist: roll1.damageResist + roll2.damageResist,\n    surgeResist: roll1.surgeResist + roll2.surgeResist,\n    evade: roll1.evade + roll2.evade\n  };\n}\n\nfunction combineRollsGroups(rolls1: Roll[], rolls2: Roll[]): Roll[] {\n  const rolls: Roll[] = [];\n  rolls1.forEach(d1R => {\n    rolls2.forEach(d2R => {\n      rolls.push(combineRolls(d1R, d2R));\n    });\n  });\n  return rolls;\n}\n\nexport function permuteDice(dice: Dice[]): PermutedDice {\n  const colors = dice.map(d => d.color);\n  const rolls = dice\n    .map(d => d.rolls)\n    .reduce((a, b) => combineRollsGroups(a, b));\n\n  return { colors, rolls };\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Select, IItemRendererProps } from \"@blueprintjs/select\";\nimport { Button, MenuItem, Navbar } from \"@blueprintjs/core\";\n\nimport { ALL_COLORS, DiceColor } from \"./data/dice\";\n\nimport \"./App.css\";\nimport { PermutationResults } from \"./PermutationResults\";\nimport { ALIGNMENT_BOTTOM } from \"@blueprintjs/icons/lib/esm/generated/iconNames\";\n\nfunction renderSelectOption(item: DiceColor, itemProps: IItemRendererProps) {\n  return (\n    <MenuItem\n      text={item}\n      onClick={itemProps.handleClick}\n      key={itemProps.index}\n    />\n  );\n}\n\nconst App: React.FC = () => {\n  const [color1, setColor1] = useState(DiceColor.NONE);\n  const [color2, setColor2] = useState(DiceColor.NONE);\n  const [color3, setColor3] = useState(DiceColor.NONE);\n  const [color4, setColor4] = useState(DiceColor.NONE);\n  const [color5, setColor5] = useState(DiceColor.NONE);\n  const [color6, setColor6] = useState(DiceColor.NONE);\n  const [color7, setColor7] = useState(DiceColor.NONE);\n  const [color8, setColor8] = useState(DiceColor.NONE);\n\n  return (\n    <div style={{ maxWidth: \"100vw\", width: \"100vw\" }}>\n      <Navbar fixedToTop className=\"bp3-dark\">\n        <Navbar.Group align={\"left\"}>\n          <Navbar.Heading>I.A. Dice Rolls</Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group align={\"right\"}>\n          <Button\n            text=\"Clear\"\n            onClick={useCallback(() => {\n              setColor1(DiceColor.NONE);\n              setColor2(DiceColor.NONE);\n              setColor3(DiceColor.NONE);\n              setColor4(DiceColor.NONE);\n              setColor5(DiceColor.NONE);\n              setColor6(DiceColor.NONE);\n              setColor7(DiceColor.NONE);\n              setColor8(DiceColor.NONE);\n            }, [\n              setColor1,\n              setColor2,\n              setColor3,\n              setColor4,\n              setColor5,\n              setColor6,\n              setColor7,\n              setColor8\n            ])}\n          />\n        </Navbar.Group>\n      </Navbar>\n      <div style={{ padding: \"1em\", width: \"100vw\", marginTop: \"50px\" }}>\n        <h5 style={{ margin: 0, marginBottom: \".5em\" }}>Dice</h5>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexWrap: \"wrap\",\n            marginBottom: \"1em\"\n          }}\n        >\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor1(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color1} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor2(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color2} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor3(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color3} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor4(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color4} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor5(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color5} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor6(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color6} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor7(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color7} />\n          </Select>\n          <Select\n            itemRenderer={renderSelectOption}\n            onItemSelect={color => setColor8(color)}\n            items={ALL_COLORS}\n          >\n            <Button rightIcon=\"caret-down\" text={color8} />\n          </Select>\n        </div>\n        <h5 style={{ margin: 0, marginBottom: \".5em\" }}>Results</h5>\n        <PermutationResults\n          colors={[\n            color1,\n            color2,\n            color3,\n            color4,\n            color5,\n            color6,\n            color7,\n            color8\n          ]}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}